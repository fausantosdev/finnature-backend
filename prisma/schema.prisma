// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  user
  admin
}

model User {
  id                     String    @id @default(uuid())
  name                   String
  date_of_birth          DateTime
  email                  String    @unique
  password_hash          String
  role                   Role      @default(user)
  password_reset_token   String?
  password_reset_expires DateTime?
  created_at             DateTime  @default(now())
  updated_at             DateTime  @updatedAt

  transaction_user      Transaction[] @relation("user")
  transaction_recipient Transaction[] @relation("recipient")

  accounts Account[]

  @@map("users")
}

model Account {
  id         String   @id @default(uuid())
  user_id    String   @unique
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  user    User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  wallets Wallet[]

  @@map("accounts")
}

model Wallet {
  id          String   @id @default(uuid())
  account_id  String
  description String
  balance     Decimal  @default(0.00)
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  account     Account       @relation(fields: [account_id], references: [id], onDelete: Cascade)
  transaction Transaction[]

  @@map("wallets")
}

enum TransactionType {
  deposit
  withdrawal
  transfer
}

enum TransactionStatus {
  pending
  completed
  failed
}

model Transaction {
  id           String            @id @default(uuid())
  user_id      String
  recipient_id String?
  wallet_id    String?
  amount       Decimal           @default(0.00)
  type         TransactionType   @default(deposit)
  status       TransactionStatus @default(pending)
  created_at   DateTime          @default(now())
  updated_at   DateTime          @updatedAt

  user      User    @relation("user", fields: [user_id], references: [id], onDelete: Cascade)
  recipient User?   @relation("recipient", fields: [recipient_id], references: [id])
  wallet    Wallet? @relation(fields: [wallet_id], references: [id])

  transactions_history TransactionHistory[]

  @@map("transactions")
}

model TransactionHistory {
  id             String   @id @default(uuid())
  transaction_id String
  details        String
  created_at     DateTime @default(now())
  updated_at     DateTime @updatedAt

  transaction Transaction @relation(fields: [transaction_id], references: [id], onDelete: Cascade)

  @@map("transaction_histories")
}
