// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  user
  admin
}

model User {
  id                     String    @id @default(uuid())
  name                   String
  date_of_birth          DateTime
  email                  String    @unique
  password_hash          String
  role                   Role      @default(user)
  password_reset_token   String?
  password_reset_expires DateTime?
  created_at             DateTime  @default(now())
  updated_at             DateTime  @updatedAt

  transaction_sender    Transaction[] @relation("sender_user")
  transaction_recipient Transaction[] @relation("recipient_user")

  wallets Wallet[]

  @@map("users")
}

model Wallet {
  id          String   @id @default(uuid())
  user_id     String
  description String
  balance     Decimal  @default(0.00)
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)

  transaction_sender    Transaction[] @relation("sender_wallet")
  transaction_recipient Transaction[] @relation("recipient_wallet")

  @@map("wallets")
}

enum TransactionType {
  deposit
  withdrawal
  transfer
}

enum TransactionStatus {
  pending
  completed
  failed
}

model Transaction {
  id                  String            @id @default(uuid())
  sender_user_id      String
  recipient_user_id   String?
  sender_wallet_id    String?
  recipient_wallet_id String?
  amount              Decimal           @default(0.00)
  type                TransactionType   @default(deposit)
  status              TransactionStatus @default(pending)
  created_at          DateTime          @default(now())
  updated_at          DateTime          @updatedAt

  sender_user    User  @relation("sender_user", fields: [sender_user_id], references: [id], onDelete: Cascade)
  recipient_user User? @relation("recipient_user", fields: [recipient_user_id], references: [id])

  sender_wallet    Wallet? @relation("sender_wallet", fields: [sender_wallet_id], references: [id])
  recipient_wallet Wallet? @relation("recipient_wallet", fields: [recipient_wallet_id], references: [id])

  transactions_history TransactionHistory[]

  @@map("transactions")
}

model TransactionHistory {
  id             String   @id @default(uuid())
  transaction_id String
  details        String
  created_at     DateTime @default(now())
  updated_at     DateTime @updatedAt

  transaction Transaction @relation(fields: [transaction_id], references: [id], onDelete: Cascade)

  @@map("transaction_histories")
}
